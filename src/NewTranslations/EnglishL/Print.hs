{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for EnglishL.
--   Generated by the BNF converter.

module NewTranslations.EnglishL.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified NewTranslations.EnglishL.Abs as EnglishL.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print EnglishL.Abs.Noun where
  prt _ (EnglishL.Abs.Noun i) = doc $ showString i
instance Print EnglishL.Abs.CNs where
  prt _ (EnglishL.Abs.CNs i) = doc $ showString i
instance Print EnglishL.Abs.CN where
  prt _ (EnglishL.Abs.CN i) = doc $ showString i
instance Print EnglishL.Abs.IVerb where
  prt _ (EnglishL.Abs.IVerb i) = doc $ showString i
instance Print EnglishL.Abs.TVerb where
  prt _ (EnglishL.Abs.TVerb i) = doc $ showString i
instance Print EnglishL.Abs.Adj where
  prt _ (EnglishL.Abs.Adj i) = doc $ showString i
instance Print EnglishL.Abs.Clause where
  prt i = \case
    EnglishL.Abs.ClauseS nounphrases verbphrases -> prPrec i 0 (concatD [prt 0 nounphrases, prt 0 verbphrases])
    EnglishL.Abs.ClauseP nounphrasep verbphrasep -> prPrec i 0 (concatD [prt 0 nounphrasep, prt 0 verbphrasep])
    EnglishL.Abs.Cond1 clause1 clause2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 clause1, doc (showString "then"), prt 0 clause2])
    EnglishL.Abs.Cond2 clause1 clause2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 clause1, prt 0 clause2])
    EnglishL.Abs.Cond3 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "only"), doc (showString "if"), prt 0 clause2])
    EnglishL.Abs.Cond4 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "if"), prt 0 clause2])
    EnglishL.Abs.BCon1 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "if"), doc (showString "and"), doc (showString "only"), doc (showString "if"), prt 0 clause2])
    EnglishL.Abs.Conj1 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "and"), prt 0 clause2])
    EnglishL.Abs.Conj2 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "but"), prt 0 clause2])
    EnglishL.Abs.Disj1 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "or"), prt 0 clause2])
    EnglishL.Abs.Disj2 clause1 clause2 -> prPrec i 0 (concatD [doc (showString "either"), prt 0 clause1, doc (showString "or"), prt 0 clause2])
    EnglishL.Abs.CNeg1 clause -> prPrec i 0 (concatD [doc (showString "it"), doc (showString "is"), doc (showString "not"), doc (showString "the"), doc (showString "case"), doc (showString "that"), prt 0 clause])
    EnglishL.Abs.CNeg2 clause -> prPrec i 0 (concatD [doc (showString "it"), doc (showString "is"), doc (showString "not"), doc (showString "true"), doc (showString "that"), prt 0 clause])
    EnglishL.Abs.CNeg3 clause -> prPrec i 0 (concatD [doc (showString "it"), doc (showString "is"), doc (showString "false"), doc (showString "that"), prt 0 clause])
    EnglishL.Abs.Spec1 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "unless"), prt 0 clause2])
    EnglishL.Abs.Spec2 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "provided"), doc (showString "that"), prt 0 clause2])
    EnglishL.Abs.Spec3 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "assuming"), doc (showString "that"), prt 0 clause2])
    EnglishL.Abs.Spec4 clause1 clause2 -> prPrec i 0 (concatD [prt 0 clause1, doc (showString "even"), doc (showString "though"), prt 0 clause2])
    EnglishL.Abs.Spec5 clause1 clause2 -> prPrec i 0 (concatD [doc (showString "unless"), prt 0 clause1, prt 0 clause2])
    EnglishL.Abs.Spec6 clause1 clause2 -> prPrec i 0 (concatD [doc (showString "provided"), doc (showString "that"), prt 0 clause1, prt 0 clause2])
    EnglishL.Abs.Spec7 clause1 clause2 -> prPrec i 0 (concatD [doc (showString "assuming"), doc (showString "that"), prt 0 clause1, prt 0 clause2])
    EnglishL.Abs.Spec8 clause1 clause2 -> prPrec i 0 (concatD [doc (showString "even"), doc (showString "though"), prt 0 clause1, prt 0 clause2])
    EnglishL.Abs.Spec9 clause invclause -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "and"), doc (showString "only"), doc (showString "if"), prt 0 clause, prt 0 invclause])
    EnglishL.Abs.Spec10 clause invclause -> prPrec i 0 (concatD [doc (showString "only"), doc (showString "if"), prt 0 clause, prt 0 invclause])
    EnglishL.Abs.ExeS nquantps -> prPrec i 0 (concatD [doc (showString "there"), doc (showString "is"), prt 0 nquantps])
    EnglishL.Abs.ExeP nquantpp -> prPrec i 0 (concatD [doc (showString "there"), doc (showString "are"), prt 0 nquantpp])

instance Print EnglishL.Abs.InvClause where
  prt i = \case
    EnglishL.Abs.InvClause1 nounphrases verbphrase -> prPrec i 0 (concatD [doc (showString "is"), prt 0 nounphrases, prt 0 verbphrase])
    EnglishL.Abs.InvClause2 nounphrasep verbphrase -> prPrec i 0 (concatD [doc (showString "are"), prt 0 nounphrasep, prt 0 verbphrase])

instance Print EnglishL.Abs.VerbPhraseP where
  prt i = \case
    EnglishL.Abs.VPP1 verbphrase -> prPrec i 0 (concatD [doc (showString "are"), prt 0 verbphrase])
    EnglishL.Abs.VPP2 adjphrase -> prPrec i 0 (concatD [doc (showString "are"), prt 0 adjphrase])
    EnglishL.Abs.VPP3 verbphrase -> prPrec i 0 (concatD [prt 0 verbphrase])
    EnglishL.Abs.VPP1Neg verbphrase -> prPrec i 0 (concatD [doc (showString "are"), doc (showString "not"), prt 0 verbphrase])
    EnglishL.Abs.VPP2Neg adjphrase -> prPrec i 0 (concatD [doc (showString "are"), doc (showString "not"), prt 0 adjphrase])
    EnglishL.Abs.VPP1NegC verbphrase -> prPrec i 0 (concatD [doc (showString "aren't"), prt 0 verbphrase])
    EnglishL.Abs.VPP2NegC adjphrase -> prPrec i 0 (concatD [doc (showString "aren't"), prt 0 adjphrase])

instance Print EnglishL.Abs.VerbPhraseS where
  prt i = \case
    EnglishL.Abs.VPS1 verbphrase -> prPrec i 0 (concatD [doc (showString "is"), prt 0 verbphrase])
    EnglishL.Abs.VPS2 adjphrase -> prPrec i 0 (concatD [doc (showString "is"), prt 0 adjphrase])
    EnglishL.Abs.VPS3 verbphrase -> prPrec i 0 (concatD [prt 0 verbphrase])
    EnglishL.Abs.VPS1Neg verbphrase -> prPrec i 0 (concatD [doc (showString "is"), doc (showString "not"), prt 0 verbphrase])
    EnglishL.Abs.VPS2Neg adjphrase -> prPrec i 0 (concatD [doc (showString "is"), doc (showString "not"), prt 0 adjphrase])
    EnglishL.Abs.VPS1NegC verbphrase -> prPrec i 0 (concatD [doc (showString "isn't"), prt 0 verbphrase])
    EnglishL.Abs.VPS2NegC adjphrase -> prPrec i 0 (concatD [doc (showString "isn't"), prt 0 adjphrase])

instance Print EnglishL.Abs.VerbPhrase where
  prt i = \case
    EnglishL.Abs.VP1 verbx -> prPrec i 0 (concatD [prt 0 verbx])
    EnglishL.Abs.VPConj1 verbx1 verbx2 -> prPrec i 0 (concatD [prt 0 verbx1, doc (showString "and"), prt 0 verbx2])
    EnglishL.Abs.VPConj2 verbx1 verbx2 -> prPrec i 0 (concatD [doc (showString "both"), prt 0 verbx1, doc (showString "and"), prt 0 verbx2])
    EnglishL.Abs.VPDisj1 verbx1 verbx2 -> prPrec i 0 (concatD [prt 0 verbx1, doc (showString "or"), prt 0 verbx2])
    EnglishL.Abs.VPDisj2 verbx1 verbx2 -> prPrec i 0 (concatD [doc (showString "either"), prt 0 verbx1, doc (showString "or"), prt 0 verbx2])
    EnglishL.Abs.VPNegDisj1 verbx1 verbx2 -> prPrec i 0 (concatD [doc (showString "neither"), prt 0 verbx1, doc (showString "nor"), prt 0 verbx2])

instance Print EnglishL.Abs.VerbX where
  prt i = \case
    EnglishL.Abs.VerbX1 iverb -> prPrec i 0 (concatD [prt 0 iverb])
    EnglishL.Abs.VerbX2 tverb nounphrasep -> prPrec i 0 (concatD [prt 0 tverb, prt 0 nounphrasep])
    EnglishL.Abs.VerbX3 tverb nounphrases -> prPrec i 0 (concatD [prt 0 tverb, prt 0 nounphrases])
    EnglishL.Abs.VerbXR1 tverb -> prPrec i 0 (concatD [prt 0 tverb, doc (showString "himself")])
    EnglishL.Abs.VerbXR2 tverb -> prPrec i 0 (concatD [prt 0 tverb, doc (showString "herself")])
    EnglishL.Abs.VerbxR3 tverb -> prPrec i 0 (concatD [prt 0 tverb, doc (showString "itself")])

instance Print EnglishL.Abs.AdjPhrase where
  prt i = \case
    EnglishL.Abs.AdjP1 adj -> prPrec i 0 (concatD [prt 0 adj])
    EnglishL.Abs.AdjPConj1 adj1 adj2 -> prPrec i 0 (concatD [prt 0 adj1, doc (showString "and"), prt 0 adj2])
    EnglishL.Abs.AdjPConj2 adj1 adj2 -> prPrec i 0 (concatD [doc (showString "both"), prt 0 adj1, doc (showString "and"), prt 0 adj2])
    EnglishL.Abs.AdjPDisj1 adj1 adj2 -> prPrec i 0 (concatD [prt 0 adj1, doc (showString "or"), prt 0 adj2])
    EnglishL.Abs.AdjPDisj2 adj1 adj2 -> prPrec i 0 (concatD [doc (showString "either"), prt 0 adj1, doc (showString "or"), prt 0 adj2])
    EnglishL.Abs.AdjPNegDisj1 adj1 adj2 -> prPrec i 0 (concatD [doc (showString "neither"), prt 0 adj1, doc (showString "nor"), prt 0 adj2])

instance Print EnglishL.Abs.NounPhraseS where
  prt i = \case
    EnglishL.Abs.NPS1 noun -> prPrec i 0 (concatD [prt 0 noun])
    EnglishL.Abs.NPS2 quantps -> prPrec i 0 (concatD [prt 0 quantps])
    EnglishL.Abs.NPS3 nquantps -> prPrec i 0 (concatD [prt 0 nquantps])

instance Print EnglishL.Abs.NounPhraseP where
  prt i = \case
    EnglishL.Abs.NPPConj1 noun1 noun2 -> prPrec i 0 (concatD [prt 0 noun1, doc (showString "and"), prt 0 noun2])
    EnglishL.Abs.NPPConj2 noun1 noun2 -> prPrec i 0 (concatD [doc (showString "both"), prt 0 noun1, doc (showString "and"), prt 0 noun2])
    EnglishL.Abs.NPPQuan1 quantpp -> prPrec i 0 (concatD [prt 0 quantpp])
    EnglishL.Abs.NPPQuan2 nquantpp -> prPrec i 0 (concatD [prt 0 nquantpp])

instance Print EnglishL.Abs.QuantPS where
  prt i = \case
    EnglishL.Abs.QuantPS1 -> prPrec i 0 (concatD [doc (showString "everything")])
    EnglishL.Abs.QuantPS2 -> prPrec i 0 (concatD [doc (showString "something")])
    EnglishL.Abs.QuantPS3 -> prPrec i 0 (concatD [doc (showString "nothing")])
    EnglishL.Abs.QuantPS4 -> prPrec i 0 (concatD [doc (showString "everybody")])
    EnglishL.Abs.QuantPS5 -> prPrec i 0 (concatD [doc (showString "somebody")])
    EnglishL.Abs.QuantPS6 -> prPrec i 0 (concatD [doc (showString "nobody")])
    EnglishL.Abs.QuantPS7 -> prPrec i 0 (concatD [doc (showString "everyone")])
    EnglishL.Abs.QuantPS8 -> prPrec i 0 (concatD [doc (showString "someone")])
    EnglishL.Abs.QuantPS9 -> prPrec i 0 (concatD [doc (showString "noone")])
    EnglishL.Abs.QuantPSUni cn -> prPrec i 0 (concatD [doc (showString "every"), prt 0 cn])
    EnglishL.Abs.QuantPSExi cn -> prPrec i 0 (concatD [doc (showString "some"), prt 0 cn])
    EnglishL.Abs.QuantPSNeg cn -> prPrec i 0 (concatD [doc (showString "no"), prt 0 cn])
    EnglishL.Abs.QuantSpec1 noun -> prPrec i 0 (concatD [doc (showString "everybody"), doc (showString "except"), prt 0 noun])
    EnglishL.Abs.QuantSpec2 noun -> prPrec i 0 (concatD [doc (showString "everyone"), doc (showString "except"), prt 0 noun])
    EnglishL.Abs.QuantSpec3 noun -> prPrec i 0 (concatD [doc (showString "everything"), doc (showString "except"), prt 0 noun])
    EnglishL.Abs.QuantSpec4 noun -> prPrec i 0 (concatD [doc (showString "everybody"), doc (showString "but"), prt 0 noun])
    EnglishL.Abs.QuantSpec5 noun -> prPrec i 0 (concatD [doc (showString "everyone"), doc (showString "but"), prt 0 noun])
    EnglishL.Abs.QuantSpec6 noun -> prPrec i 0 (concatD [doc (showString "everything"), doc (showString "but"), prt 0 noun])
    EnglishL.Abs.QuantSpec7 noun -> prPrec i 0 (concatD [doc (showString "something"), doc (showString "other"), doc (showString "than"), prt 0 noun])
    EnglishL.Abs.QuantSpec8 noun -> prPrec i 0 (concatD [doc (showString "someone"), doc (showString "other"), doc (showString "than"), prt 0 noun])
    EnglishL.Abs.QuantSpec9 noun -> prPrec i 0 (concatD [doc (showString "somebody"), doc (showString "other"), doc (showString "than"), prt 0 noun])
    EnglishL.Abs.QuantSpec10 cn noun -> prPrec i 0 (concatD [doc (showString "some"), prt 0 cn, doc (showString "other"), doc (showString "than"), prt 0 noun])
    EnglishL.Abs.QuantSpec11 cn noun -> prPrec i 0 (concatD [doc (showString "every"), prt 0 cn, doc (showString "except"), prt 0 noun])

instance Print EnglishL.Abs.NQuantPS where
  prt i = \case
    EnglishL.Abs.NQuantPS10 cn -> prPrec i 0 (concatD [doc (showString "at"), doc (showString "least"), doc (showString "one"), prt 0 cn])
    EnglishL.Abs.NQuantPS11 cn -> prPrec i 0 (concatD [doc (showString "at"), doc (showString "most"), doc (showString "one"), prt 0 cn])
    EnglishL.Abs.NQuantPS12 cn -> prPrec i 0 (concatD [doc (showString "exactly"), doc (showString "one"), prt 0 cn])

instance Print EnglishL.Abs.QuantPP where
  prt i = \case
    EnglishL.Abs.QuantPP1 cns -> prPrec i 0 (concatD [doc (showString "all"), prt 0 cns])
    EnglishL.Abs.QuantPP2 cns -> prPrec i 0 (concatD [doc (showString "some"), prt 0 cns])
    EnglishL.Abs.QuantPP3 cns -> prPrec i 0 (concatD [doc (showString "no"), prt 0 cns])

instance Print EnglishL.Abs.NQuantPP where
  prt i = \case
    EnglishL.Abs.NQuantPP1 cns -> prPrec i 0 (concatD [doc (showString "at"), doc (showString "least"), doc (showString "two"), prt 0 cns])
    EnglishL.Abs.NQuantPP2 cns -> prPrec i 0 (concatD [doc (showString "at"), doc (showString "least"), doc (showString "three"), prt 0 cns])
    EnglishL.Abs.NQuantPP3 cns -> prPrec i 0 (concatD [doc (showString "at"), doc (showString "most"), doc (showString "two"), prt 0 cns])
    EnglishL.Abs.NQuantPP5 cns -> prPrec i 0 (concatD [doc (showString "exactly"), doc (showString "two"), prt 0 cns])
