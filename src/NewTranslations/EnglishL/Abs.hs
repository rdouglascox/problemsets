-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language EnglishL.

module NewTranslations.EnglishL.Abs where

import Prelude (String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Clause
    = ClauseS NounPhraseS VerbPhraseS
    | ClauseP NounPhraseP VerbPhraseP
    | Cond1 Clause Clause
    | Cond2 Clause Clause
    | Cond3 Clause Clause
    | Cond4 Clause Clause
    | BCon1 Clause Clause
    | Conj1 Clause Clause
    | Conj2 Clause Clause
    | Disj1 Clause Clause
    | Disj2 Clause Clause
    | CNeg1 Clause
    | CNeg2 Clause
    | CNeg3 Clause
    | Spec1 Clause Clause
    | Spec2 Clause Clause
    | Spec3 Clause Clause
    | Spec4 Clause Clause
    | Spec5 Clause Clause
    | Spec6 Clause Clause
    | Spec7 Clause Clause
    | Spec8 Clause Clause
    | Spec9 Clause InvClause
    | Spec10 Clause InvClause
    | ExeS NQuantPS
    | ExeP NQuantPP
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data InvClause
    = InvClause1 NounPhraseS VerbPhrase
    | InvClause2 NounPhraseP VerbPhrase
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VerbPhraseP
    = VPP1 VerbPhrase
    | VPP2 AdjPhrase
    | VPP3 VerbPhrase
    | VPP1Neg VerbPhrase
    | VPP2Neg AdjPhrase
    | VPP1NegC VerbPhrase
    | VPP2NegC AdjPhrase
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VerbPhraseS
    = VPS1 VerbPhrase
    | VPS2 AdjPhrase
    | VPS3 VerbPhrase
    | VPS1Neg VerbPhrase
    | VPS2Neg AdjPhrase
    | VPS1NegC VerbPhrase
    | VPS2NegC AdjPhrase
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VerbPhrase
    = VP1 VerbX
    | VPConj1 VerbX VerbX
    | VPConj2 VerbX VerbX
    | VPDisj1 VerbX VerbX
    | VPDisj2 VerbX VerbX
    | VPNegDisj1 VerbX VerbX
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VerbX
    = VerbX1 IVerb
    | VerbX2 TVerb NounPhraseP
    | VerbX3 TVerb NounPhraseS
    | VerbXR1 TVerb
    | VerbXR2 TVerb
    | VerbxR3 TVerb
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AdjPhrase
    = AdjP1 Adj
    | AdjPConj1 Adj Adj
    | AdjPConj2 Adj Adj
    | AdjPDisj1 Adj Adj
    | AdjPDisj2 Adj Adj
    | AdjPNegDisj1 Adj Adj
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NounPhraseS = NPS1 Noun | NPS2 QuantPS | NPS3 NQuantPS
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NounPhraseP
    = NPPConj1 Noun Noun
    | NPPConj2 Noun Noun
    | NPPQuan1 QuantPP
    | NPPQuan2 NQuantPP
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data QuantPS
    = QuantPS1
    | QuantPS2
    | QuantPS3
    | QuantPS4
    | QuantPS5
    | QuantPS6
    | QuantPS7
    | QuantPS8
    | QuantPS9
    | QuantPSUni CN
    | QuantPSExi CN
    | QuantPSNeg CN
    | QuantSpec1 Noun
    | QuantSpec2 Noun
    | QuantSpec3 Noun
    | QuantSpec4 Noun
    | QuantSpec5 Noun
    | QuantSpec6 Noun
    | QuantSpec7 Noun
    | QuantSpec8 Noun
    | QuantSpec9 Noun
    | QuantSpec10 CN Noun
    | QuantSpec11 CN Noun
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NQuantPS = NQuantPS10 CN | NQuantPS11 CN | NQuantPS12 CN
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data QuantPP = QuantPP1 CNs | QuantPP2 CNs | QuantPP3 CNs
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NQuantPP
    = NQuantPP1 CNs | NQuantPP2 CNs | NQuantPP3 CNs | NQuantPP5 CNs
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Noun = Noun String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CNs = CNs String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CN = CN String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype IVerb = IVerb String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TVerb = TVerb String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Adj = Adj String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

